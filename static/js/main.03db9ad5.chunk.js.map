{"version":3,"sources":["components/Container/index.js","components/Message/index.js","components/Instructions/index.js","components/Tile/index.js","components/Header/index.js","components/Footer/index.js","components/Game/index.js","App.js","index.js"],"names":["Container","props","react_default","a","createElement","className","children","Message","state","message","renderMessage","_this","prevProps","newState","score","topScore","this","setState","id","concat","Component","Instructions","components_Message","Tile","src","image","aria-label","alt","value","onClick","handleClick","Header","Footer","Game","data","shuffleDeck","sort","b","Math","random","resetDeck","resetData","map","item","Object","objectSpread","clicked","correctGuess","newData","newScore","newTopScore","max","wrongGuess","gameCardClick","guessedCorrectly","console","log","_this2","components_Header","components_Instructions","components_Container","components_Tile","components_Footer","App","components_Game","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.03db9ad5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Container = props => <main className=\"gameContainer\">\n    {props.children}\n</main>;\n\nexport default Container;","import React, {Component} from \"react\";\n\nclass Message extends Component {\n\n\n    state = {\n        message: \"\"\n    }\n\n    // function runs on every state change\n    componentDidUpdate(prevProps) {\n\n\n    //   will be passed into setState function\n      let newState = {\n        message: \"\"\n      }\n\n      // deconstruct score and topScore from the pervious state\n      const {score, topScore} = prevProps\n\n      // change message if user guess correclty or incorrectly\n      if (score === 0 && topScore === 0) {\n        newState.message = \"\";\n      } else if (score !== 0 && topScore > 0) {\n        newState.message = \"correct\";\n      } else {\n        newState.message = \"incorrect\";\n      }\n\n      // set the state with the new message if the score changes, \n      // or the message and state message are not equal\n      if (score !== this.props.score || this.state.message !== newState.message) {\n        this.setState(newState);\n      }\n  \n    }\n\n    // change the display message based on the message state\n    renderMessage = () => {\n        switch (this.state.message) {\n        case \"correct\":\n          return \"You guessed correctly!\";\n        case \"incorrect\":\n          return \"You guessed incorrectly!\";\n        default:\n          return \"Click a character to begin!\";\n        }\n    };\n\n    render() {\n        return(\n          <h2 id={`${this.state.message}`}>\n            {this.renderMessage()}\n          </h2>  \n        );\n    }\n}\n\nexport default Message;","import React from \"react\";\nimport Message from \"../Message\";\n\nconst Instructions = props => (\n    <div className=\"container\" id=\"instructions\">\n        <h3>{props.message}</h3>\n        <Message score={props.score} topScore={props.topScore}/>\n    </div>\n);\n\nexport default Instructions;","import React from \"react\";\n\nconst Tile = props => (\n        <img\n            src={`${props.image}`}\n            aria-label=\"click item\"\n            alt=\"Christmas Story Character\"\n            value={`${props.id}`}\n            onClick={() => props.handleClick(props.id)}></img>\n);\n\nexport default Tile;","import React from \"react\";\n\nconst Header = props => (\n    <div className=\"container\">\n        <div className=\"row\" id=\"header\">\n            <div className=\"col-lg-6\">\n                    <img\n                        src=\"assets/170808-news-a-christmas-story.png\"\n                        alt=\"A Christmas Story Clicky Game\"\n                        id=\"img-header\">\n                    </img>\n            </div>\n            <div className=\"col-lg-6\">\n                <ul>\n                    <span>\n                    <li id=\"score\">Score: {props.score} </li>\n                    <li id=\"score\">Top Score: {props.topScore}</li>\n                    </span>\n                </ul>\n            </div>\n        </div>\n    </div>\n)\n\nexport default Header;","import React from \"react\";\n\nconst Footer = () => (\n        <footer className=\"footer\">\n                <ul id='footer-list'>\n                    <li>Clicky Game!</li>\n                    <li>Â© 2018 Greg Turner</li>\n                    {/* <li><a href=\"#\" target=\"blank\"><span><img className='logo' src=\"assets/images/github.png\"/></span> Github</a></li> */}\n                </ul>\n        </footer>\n)\n\nexport default Footer;","import React, {Component} from \"react\";\nimport Container from \"../Container\";\nimport Instructions from \"../Instructions\";\nimport Tile from \"../Tile\";\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\nimport data from \"../../data\";\n\nclass Game extends Component {\n\n    state = {\n        data,\n        score: 0,\n        topScore: 0,\n        message: \"Click as many images without repeating.\"\n    };\n\n    // function gets called when the page loads\n    componentDidMount() {\n        // reorders the dataarray on state changes\n        this.setState({\n            data: this.shuffleDeck(this.state.data)\n        });\n        console.log(data);\n    }\n\n    // shuffle the imported data array in random order\n    shuffleDeck = data => {\n        let newData = data.sort(function (a, b) {\n            return 0.5 - Math.random()\n        });\n        return newData;\n    };\n\n    // resets all the clicked properties to false\n    resetDeck = data => {\n        const resetData = data.map(item => ({\n            ...item,\n            clicked: false\n        }));\n        // console.log(data); console.log(resetData);\n        return this.shuffleDeck(resetData);\n    };\n\n    // checks to see if score is higher than the topscore then updates the state\n    // with the update array\n    correctGuess = newData => {\n        let newScore = this.state.score;\n        newScore++;\n        let newTopScore = Math.max(newScore, this.state.topScore);\n\n        this.setState({\n            data: this.shuffleDeck(newData),\n            score: newScore,\n            topScore: newTopScore\n        })\n    }\n\n    // restarts the game with fresh data\n    wrongGuess = newData => {\n        this.setState({\n            data: this.resetDeck(newData),\n            score: 0\n        })\n    }\n\n    // when a card is clicked, check if it has been clicked before, then update that\n    // cards clicked property\n    gameCardClick = id => {\n        let guessedCorrectly = false;\n        // newData will be the data array with updated clicked properties\n        const newData = this.state.data.map(item => {\n                if (item.id === id) {\n                    if (!item.clicked) {\n                        item.clicked = true;\n                        guessedCorrectly = true;\n                    }\n                }\n                return item;\n            });\n        // if guessedCorrectly = true, run the correctGuess function, else run the\n        // wrongGuess function\n        guessedCorrectly ? this.correctGuess(newData) : this.wrongGuess(newData);\n    };\n\n    render() {\n        return (\n            <div>\n                <Header score={this.state.score} topScore={this.state.topScore}/>\n                <Instructions message={this.state.message} score={this.state.score} topScore={this.state.topScore}/>\n                <Container>\n                    {this.state.data.map(item => (\n                        \n                                <Tile\n                                    id={item.id}\n                                    image={item.image}\n                                    clicked={item.clicked}\n                                    handleClick={this.gameCardClick}\n                                />\n                    \n                        ))}\n                </Container>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React from \"react\";\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}